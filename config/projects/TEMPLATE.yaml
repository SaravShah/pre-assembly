# General YAML conventions:
#
#    ~         nil
#    true      Boolean
#    false     Boolean
#    'foo'     a string


# General options relating to project type and the registration of objects.
project_style:
  # A general designation of the project type, style, and input structure.  This defines howe base content metadata is generated
  content_structure:  'simple_image'  # generates content metadata with image resource types by looking at actual files in object
                      'simple_book'   # generates content metadata with book/page resource types by looking at actual files in object
                      'smpl'          # generates content metadata by converting from SMPL provided pre-content metadata, ignoring actual files

  # Whether the pre-assembly process should register the objects.
  should_register:    true            # if objects are not yet registered
                      false           # if the objects are already registered

  # The method pre-assembly uses to obtain a druid for the digital object. If "should_register" is true above, you currently
  # must specify "suri".  If it is false, you can choose another method
  get_druid_from:     'suri'               # Only used with should_register = true.
                      'container'          # Object is contained in a druid subdir, i.e. subfolder name is the druid.
                      'container_barcode'  # Object is contained in a barcode subdir.

  # Whether to mint mock druids.
  # Used only by developers.
  use_druid_minter:   false   # This is what you will usually want and will follow the 'get_druid_from' specified above.
                      true    # Mints a mock druid rather than using Suri. Useful in development.


# Paths to the pre-assembly input and output.
bundle_dir:           'foo/bar/revs'     # Input location for all of your project content (the "bundle").  May contain images directly, or may contain folders, one per object (usually named by druid).
staging_dir:          '/dor/assembly'    # Where to put the pre-assembled materials.  NOTE: This is where the assembly robots expect to find the assembled content.  If changed, assembly robots will not work.  Only change if you really need to.


# How will pre-assembly locate objects within the bundle_dir?
# Here we are discovering the object containers. An object container
# is either a single file or a single directory.
object_discovery:
  # Option 1: use a manifest.
  use_manifest:       true    # If true, set glob and regex to nil.
                      false

  # Option 2: directory crawl.
  # This process has two phases.
  #
  #   - A glob pattern is used to find the object containers.
  #     This pattern is passed to Ruby's Dir.glob().
  #
  #   - Optionally, the results of that glob can be filtered,
  #     retaining only the items matching the given regex.
  #
  # Both the glob and regex can be expressed in relative terms --
  # in other words, they do not need to include the bundle_dir.
  #
  # Various examples are shown.
  glob:               '*'                                    # Everything.
                      '^[a-z][a-z]\d\d\d[a-z][a-z]\d\d\d\d$' # Druid directories.
                      '^\d+$'                                # Barcode directories.
                      '*.tif'                                # Only .tif files.
  regex:              ~
                      ''

stageable_discovery:
  use_container:      true
  glob:               ~
                      '(?ix) ^ ( \d+\.tif | descMetadata\.xml ) $'
                      '0[12]/'  # The 00, 01, and 02 subdirectories.
                      '00/*'    # Everything in 00 subdirectory. In the staged materials
  regex:              ~

content_exclusion:    ~

manifest:             'manifest.csv'
checksums_file:       'checksums.txt'
desc_md_template:     'mods_template.xml'

progress_log_file:    'log/progress_revs.yaml'
project_name:         'Revs'
apo_druid_id:         'druid:qv648vd4392'
set_druid_id:         'druid:yt502zj0924'

publish_attr:
  publish:            ~
  shelve:             ~
  preserve:           ~

compute_checksum:     true
init_assembly_wf:     true

content_md_creation:
  style:              :default
  pre_md_file:        ~

manifest_cols:
  object_container:   'filename'
  source_id:          'sourceid'
  label:              'label'

validate_usage:       true
show_progress:        true
limit_n:              ~
uniqify_source_ids:   false
cleanup:              false
resume:               false
