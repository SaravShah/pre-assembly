# TODO: Modify assembly robots to handle different types of content metadata.
# TODO: Set up pre-assembly under Hudson.
# TODO: Set up assembly under Hudson.

# TODO: reevaluate logging for use in deployed context.
# TODO: consider whether to persist information about druids processed.
# TODO: Modify revs.yaml when we start using for real.

# TODO: YARD documentation.

# TODO: WorkflowService should provide a way to delete a workflow.


-----------------------
OTHER REFACTORING NOTES
-----------------------

Convert YAML files to use string keys. Bundle should convert them to symbols.

Refactor desc_meta var naming.

Stop passing so many params from bundle down to digital objects
    - define a class method in Bundle that returns an OpenStruct
    - it will contain all Bundle-level parameters needed by digital objects

        bconf         = Bundle.config
        @apo_druid_id = bconf.apo_druid_id


-------------------
PROJECT DIFFERENCES
-------------------

Projects to use as most pressing examples:

    - Revs
    - SOHP
    - Gould
    - ReidDennis
    - Rumsey [but waiting on specs from Lynn?]

Project structure and differences

    revs
        - one image per digital object
        - flat structure in bundle dir
        - checksums file
        - manifest file with metadata

    rumsey
        - subdir for each digital object
        - one image per object
        - object also includes a descMetadata file
        - no checksums or manifest
        - objects are already registered
        - subdir is the druid

    gould
        - subdir/00 for each digital object
        - multiple images per object
        - images are jpg, not tif
        - objects are already registered
        - subdir is a barcode, which can be used to obtain druid

        - other details:
          - See /thumpers/dpgthumper2-se1/Gould
          - The desc metadata is in symphony.
          - Can get druid using query_by_id(BARCODE) [see dor-services-gem].
          - Content metadata: ask Gary about AP.
          - Misc files at root: probably ignore.
          - Some jpg are in 00 subdir, some are not (36105115575867).
          - Some subdirs have misc files (.zip or .md5). Ignore?

    AP
        - subdir for each digital object
        - within that subdir, several number subdirs: 00 01 02 03 05.
        - different image types/purposes the numbered subdirs
        - multiple images per object
        - multiple types: tif, jp2, and 3 types of jpg
        - objects are already registered
        - main subdir is the druid

    Hummel
        - Same as AP, but fewer number subdirs: 00 05.

    SOHP
        - initially, lab will provide csv manifest
        - later, lab will provide contentMetadata, which might need some transformation
        - subdir for each digital object
        - objects are already registered
        - subdir is the druid
        - descMeta is probably in mdtoolkit
        - contentMetadata contains multiple resource nodes of varying types
          - audio resources
            - there are three types of audio resource nodes: pm, sh, sl
            - there can be multiple resource nodes of each type
            - 3 file nodes per audio resource: audio file; techMeta xml file; md5 text file
          - image resources
            - multiple image resource nodes
            - 2 file nodes per image resource: image file; md5 text file.
          - text resources
            - only 1 resource per object (at least in the example provided)
            - 2 file nodes per image resource: pdf transcript file; md5 text file.

    ReidDennis
        - three parent dirs: tif, jpeg, jp2
        - each parent dir contains multiple images, one image per object
        - if we can ignore the jpeg and jp2 dirs, the project is structured like Revs
        - has a manifest
        - we could create a checksums.txt file
        - manifest requires some more complex templating logic


----------------
REFACTORING PLAN
----------------

Bundle

    load_checksums
        - iterate over all files of all digital objects
            get_checksum(dobj, file)
                - load checksum from the provider supplied materials, or compute
                - return the checksum
            attach checksum to the file

    validate_files
        - iterate over all files of all digital objects
            - if an image type: validate it using assembly-image
            - otherwise: skip it
            - more validation can be added later

    process_manifest
        - skip if project doesn't have a manifest
        - set dobj attributes needed to round out object registration
            label
            source_id

    process_digital_objects
        - no change

    delete_digital_objects
        - only if @cleanup
        - only if pre-assembly registered the objects


obtaining the druid
    - conditional logic
    - revs:
        claim_druid()
        register()
        set attribute: @registered_by_pre_assembly
    - other projects:
        get druid from subdir or barcode

add_dor_object_to_set()
    - perform if @set_druid_id is present 

stage()
    - replaces stage_images()
    - don't iterate over the object's images, copying each one
    - instead we need a new attribute: stagable_items = Array
        - revs     [tif]
        - rumsey   [image, descMeta]
        - gould    [subdir/00]
        - ap,sohp  [subdir]
    - for each stagable item, use FileUtils.cp_r(SRC, DST)
    - call druid_tree_mkdir() only once, at beginning

content metadata
    - conditional logic with several styles:
        - one image per object
          - revs
          - rumsey
          - ReidDennis
        - simple book
          - gould
        - book with multiple image types per page
          - AP
          - Hummel
        - audio
          - SOHP

desc metadata
    - skip for many projects
    - if needed, use manifest and template
        revs
        ReidDennis

initialize_assembly_workflow
    - Store workflow in APO.
    - just make service call to begin assembly; no need to generate XML.
    - remove assembly steps from configuration.
    - always do, unless disabled (add parameter to support this)
