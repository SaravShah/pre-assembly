# TODO: reevaluate logging for use in deployed context.
# TODO: consider whether to persist information about druids processed.
# TODO: Modify revs.yaml when we start using for real.

# TODO: YARD documentation.
# TODO: refactor to handle DPG content.

# TODO: WorkflowService should provide a way to delete a workflow.


------------------------------------------------
REFACTORING TO HANDLE DIFFERENT TYPES OF BUNDLES
------------------------------------------------

Projects to use as examples:

    - SOHP
    - Gould
    - Rumsey [but waiting on specs from Lynn?]

Refactoring:

    - Required parameters is less strict:
        - checksums optional
        - manifest optional
        
        - modify bin/pre-assemble
        - modify check_for_required_files

    - Generate if not provided:
        - checksums
        - manifest

        - But where should they be generated?
            - In bundle dir?
            - With optional cleanup step?

    - parse_manifest() needs to return rows of info
        - sourceid
        - label
        - filename

    - different behavior wrt registration

    - stage_images() needs renaming and refactoring
        revs:   copy 1 image file to druid tree
        rumsey: copy subdir contents to druid tree

    - content_metadata: seems ok

    - desc_metadata: just skip for Rumsey

    - Steps

        Rev  Rum  Gou

             .    .    get_druid    # From subdir or barcode.
        .              claim_druid
        .              register
        .              add_dor_object_to_set

        .    .    .    stage_images stager, staging_dir

        .    .    .    generate_content_metadata
        .    .    .    write_content_metadata

        .              generate_desc_metadata
        .              write_desc_metadata

        .    .    .    initialize_assembly_workflow

    - Store workflow in APO, and modify pre-assembly code accordingly.
        - no need to generate XML here.
        - can remove assembly steps from configuration.
        - just make service call to begin assembly.


Project structure and differences

    revs
        - one image per digital object
        - flat structure in bundle dir
        - checksums file
        - manifest file with metadata

    rumsey
        - subdir for each digital object
        - one image per object
        - object also includes a descMetadata file
        - no checksums or manifest
        - objects are already registered
        - subdir is the druid

    gould
        - subdir/00 for each digital object
        - multiple images per object
        - images are jpg, not tif
        - objects are already registered
        - subdir is a barcode, which can be used to obtain druid

    AP
        - subdir for each digital object
        - within that subdir, several number subdirs: 00 01 02 03 05.
        - different image types/purposes the numbered subdirs
        - multiple images per object
        - multiple types: tif, jp2, and 3 types of jpg
        - objects are already registered
        - main subdir is the druid

    Hummel
        - Same as AP, but fewer number subdirs: 00 05.

    SOHP
        - initially, lab will provide csv manifest
        - later, lab will provide contentMetadata, which might need some transformation
        - subdir for each digital object
        - objects are already registered
        - subdir is the druid
        - contentMetadata contains multiple resource nodes of varying types
          - audio resources
            - there are three types of audio resource nodes: pm, sh, sl
            - there can be multiple resource nodes of each type
            - 3 file nodes per audio resource: audio file; techMeta xml file; md5 text file
          - image resources
            - multiple image resource nodes
            - 2 file nodes per image resource: image file; md5 text file.
          - text resources
            - only 1 resource per object (at least in the example provided)
            - 2 file nodes per image resource: pdf transcript file; md5 text file.

    ReidDennis
        - three parent dirs: tif, jpeg, jp2
        - each parent dir contains multiple images, one image per object
        - if we can ignore the jpeg and jp2 dirs, the project is structured like Revs
        - has a manifest
        - we could create a checksums.txt file
        - manifest requires some more complex templating logic

Gould details:
    - See /thumpers/dpgthumper2-se1/Gould
    - Each dir is a barcode.
    - The source images are jpg.
    - The desc metadata is in symphony.
    - Can get druid using query_by_id(BARCODE) [see dor-services-gem].
    - Content metadata: ask Gary about AP.
    - Misc files at root: probably ignore.
    - Some jpg are in 00 subdir, some are not (36105115575867).
    - Some subdirs have misc files (.zip or .md5). Ignore?


stage_images()
    - change to stage()
    - don't interate over the object's images, copying each one
    - instead we need a new attribute: stagable_items = Array
    - for each stagable item, use `cp -r ITEM DRUID_TREE_DIR`
