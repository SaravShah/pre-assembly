# TODO: input-profile sanity checks.

# TODO: reevaluate logging for use in deployed context.
# TODO: consider whether to persist information about druids processed.
# TODO: Modify revs.yaml when we start using for real.

# TODO: YARD documentation.
# TODO: refactor to handle DPG content.

# TODO: WorkflowService should provide a way to delete a workflow.


Receive bundle of materials (manual):

    - Receive the bundle of material (e.g. REVS hard drive).
    - Copy the bundle to a prep area on the thumper staging machine.
    - Launch the pre_assembly process.


Pre-assembly (automated):

    # Load information from the data provider.
    - Expected checksum metadata.
    - Manifest.

    For each digital object:

        - Register the object and acquire a druid.
        - Copy the object to a druid tree in thumper staging directory.
        - Generate contentMetadata.xml.
        - Generate descMetadata.xml.
        - Initialize the object's assemblyWF in DOR (a REST call).

        - Later: get descriptive metadata from other sources, such as mdtoolkit
          and symphony.   This should happen during common accessioning and is done by existing robots.


Temp notes on sets:

    :set_druid_id: 'druid:nt028fd5773'

    {
      :object_type  => 'item',
      :admin_policy => 'druid:qv648vd4392',
      :source_id    => { 'Revs' => 'foo_' + Time.now.strftime('%s') },
      :label        => 'blah', :tags         => ["Project : Revs"],
    }


    <?xml version="1.0"?>
    <rdf:RDF xmlns:fedora-model="info:fedora/fedora-system:def/model#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:fedora="info:fedora/fedora-system:def/relations-external#" xmlns:hydra="http://projecthydra.org/ns/relations#">
      <rdf:Description rdf:about="info:fedora/druid:bd935rr8206">
        <hydra:isGovernedBy rdf:resource="info:fedora/druid:nk327xn8125"/>
        <fedora-model:hasModel rdf:resource="info:fedora/hydra:commonMetadata"/>
        <fedora:isMemberOf rdf:resource="info:fedora/druid:zb871zd0767"/>
        <fedora:isMemberOfCollection rdf:resource="info:fedora/druid:zb871zd0767"/>
      </rdf:Description>
    </rdf:RDF>

    zb871zd0767


    When registering Revs objects during pre-assembly, I need to declare them to be
    members of a set. I assume such relationships are ultimately expressed in the
    RELS-EXT datastream under the fedora:isMemberOf or fedora:isMemberOfCollection
    tags (or both?). Does dor-services-gem provide a convenient way to to declare
    the relationship (in registration_service.rb, I see mention of a parent, but it
    doesn't appear to be used), or do I have to manipulate the RELS-EXT datastream
    directly?

    [:is_member_of, "info:fedora/druid:nt028fd5773"]
    [:is_member_of_collection, "info:fedora/druid:nt028fd5773"]
